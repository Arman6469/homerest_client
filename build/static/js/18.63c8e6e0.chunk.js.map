{"version":3,"sources":["components/OrderForm/Error/Error.js","components/OrderForm/OrderForm.js","pages/Cart/CartPage.js"],"names":["Error","touched","message","style","color","fontSize","margin","padding","validationSchema","Yup","shape","email","max","required","adress","min","firstname","lastname","phone","matches","OrderForm","cartProducts","myRef","useRef","sendEmail","values","a","current","executeAsync","token","mail","products","globalAPI","method","url","data","fetchedData","swal","then","localStorage","clear","window","location","reload","error","console","log","className","initialValues","onSubmit","setSubmitting","resetForm","errors","handleChange","handleBlur","handleSubmit","id","name","type","placeholder","onBlur","onChange","value","sitekey","process","size","ref","connect","state","fetchData","props","useState","setCartProducts","totalPrice","setTotalPrice","setItem","useLocalStorage","useEffect","gin","i","length","map","product","cartItemsID","_id","prev","count","price","item","key","data-label","src","images","alt","description","width","title","onClick","newCartItemsID","setCartItemsID","minusItem","plusItem","tabIndex","newProducts","deleteItem","role","aria-label"],"mappings":"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","file":"static/js/18.63c8e6e0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error = ({touched, message}) => {\n    if(!touched){\n        return <div style={{fontSize: '10px', margin: '0', padding: '0'}}>&nbsp;</div>\n    }\n    if (message) {\n        return <div style={{color: 'red', fontSize: '10px', margin: '0', padding: '0'}}>{message}</div>\n    }\n    return <div>&nbsp;</div>\n}\n\n\nexport default Error\n","import React, { useRef } from \"react\";\nimport \"./OrderForm.scss\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Error from \"./Error/Error\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport swal from \"sweetalert\";\nimport globalAPI from \"../../api/globalAPI\";\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Must b a valid email address\")\n    .max(30, \"Must be shorter than 30\")\n    .required(\"required\"),\n  adress: Yup.string()\n    .min(6, \"Must be more than 6 letters\")\n    .required(\"required\"),\n  firstname: Yup.string().required(\"required\"),\n  lastname: Yup.string().required(\"required\"),\n  phone: Yup.string()\n    .required()\n    .matches(/^[0-9+]+$/, \"Must be only digits\")\n    .min(12, \"Must be exactly 12 symbols\")\n    .max(12, \"Must be exactly 12 sybmols\")\n    .required(\"required\"),\n});\n\nexport default function OrderForm({ cartProducts }) {\n  const myRef = useRef();\n\n  const sendEmail = async (values) => {\n    const token = await myRef.current.executeAsync();\n\n    const mail = { ...values, products: [...cartProducts], token };\n\n    try {\n      const data = await globalAPI({\n        method: \"POST\",\n        url: \"/email/sendmail\",\n        data: mail,\n      });\n      const fetchedData = data.data;\n      if (fetchedData.message) {\n        swal(\"’à÷Ç’º’°’°’úü§©\", fetchedData.message, \"success\").then(function () {\n          localStorage.clear();\n          window.location.reload();\n        });\n      } else if (fetchedData.error) {\n        swal(\"’é’°’µüòï, ‘ª’∂’π ’∏÷Ä ’¢’°’∂ ’°’µ’∂ ’π’ßüßê\", fetchedData.error, \"warning\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <section className=\"signup_main_section\">\n      <div className=\"signup_form\">\n        <div className=\"signup_main_part\">\n          <h2 className=\"registration_title\">Check Out</h2>\n          <Formik\n            initialValues={{\n              firstname: \"\",\n              lastname: \"\",\n              email: \"\",\n              phone: \"\",\n              adress: \"\",\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting, resetForm }) => {\n              setSubmitting(true);\n              sendEmail(values);\n              resetForm();\n              setSubmitting(false);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                <div\n                  className={\n                    touched.firstname && errors.firstname\n                      ? \"error ui large input form_input\"\n                      : \"ui input large form_input\"\n                  }\n                >\n                  <input\n                    id=\"firstname\"\n                    name=\"firstname\"\n                    type=\"text\"\n                    className=\"order_inputs\"\n                    placeholder=\"Enter your firstname\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.firstname}\n                  />\n                  <Error\n                    touched={touched.firstname}\n                    message={errors.firstname}\n                  />\n                </div>\n                <div\n                  className={\n                    touched.lastname && errors.lastname\n                      ? \"error ui large input form_input\"\n                      : \"ui input large form_input\"\n                  }\n                >\n                  <input\n                    id=\"lastname\"\n                    name=\"lastname\"\n                    type=\"text\"\n                    className=\"order_inputs\"\n                    placeholder=\"Enter your lastname\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.lastname}\n                  />\n                  <Error touched={touched.lastname} message={errors.lastname} />\n                </div>\n                <div\n                  className={\n                    touched.email && errors.email\n                      ? \"error ui large input form_input\"\n                      : \"ui input large form_input\"\n                  }\n                >\n                  <input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    className=\"order_inputs\"\n                    placeholder=\"Enter your email: Example  example@example.com\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.email}\n                  />\n                  <Error touched={touched.email} message={errors.email} />\n                </div>\n                <div\n                  className={\n                    touched.phone && errors.phone\n                      ? \"error ui large input form_input\"\n                      : \"ui input large form_input\"\n                  }\n                >\n                  <input\n                    id=\"phone\"\n                    name=\"phone\"\n                    type=\"text\"\n                    className=\"order_inputs\"\n                    placeholder=\"Enter your phone number: Example  +37400000000\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.phone}\n                  />\n                  <Error touched={touched.phone} message={errors.phone} />\n                </div>\n                <div\n                  className={\n                    touched.adress && errors.adress\n                      ? \"error ui large input form_input\"\n                      : \"ui input large form_input\"\n                  }\n                >\n                  <input\n                    id=\"adress\"\n                    name=\"adress\"\n                    type=\"adress\"\n                    className=\"order_inputs\"\n                    placeholder=\"Enter your address\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    value={values.adress}\n                  />\n                  <Error touched={touched.adress} message={errors.adress} />\n                </div>\n                <ReCAPTCHA\n                  sitekey={process.env.REACT_APP_PUBLIC_RECAPTCHA_KEY}\n                  size=\"invisible\"\n                  ref={myRef}\n                />\n                <button\n                  className=\"submit_button_order font-small weight-7\"\n                  type=\"submit\"\n                >\n                  Check Out\n                </button>\n              </form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </section>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./cartpage.scss\";\nimport { connect } from \"react-redux\";\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\nimport OrderForm from \"../../components/OrderForm/OrderForm\";\n\nfunction CartPage(props) {\n  const [cartProducts, setCartProducts] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const { setItem } = useLocalStorage();\n\n  useEffect(() => {\n    let gin = 0;\n    for (let i = 0; i < cartProducts.length; i++) {\n      gin += cartProducts[i].totalPrice;\n    }\n    setTotalPrice(gin);\n  }, [cartProducts]);\n\n  useEffect(() => {\n    if (props.data) {\n      setCartProducts([]);\n      props.data.map((product) => {\n        if (props.cartItemsID[product._id]) {\n          setCartProducts((prev) => {\n            return [\n              ...prev,\n              {\n                ...product,\n                count: props.cartItemsID[product._id],\n                totalPrice: props.cartItemsID[product._id] * product.price,\n              },\n            ];\n          });\n        }\n        return null;\n      });\n    }\n  }, [props.data, props.cartItemsID]);\n\n  const plusItem = (id, count) => {\n    const newCartItemsID = { ...props.cartItemsID, [id]: count + 1 };\n    props.setCartItemsID(newCartItemsID);\n    setItem(\"cartItems\", newCartItemsID);\n  };\n  const minusItem = (id, count) => {\n    const newCartItemsID = { ...props.cartItemsID, [id]: count - 1 };\n    props.setCartItemsID(newCartItemsID);\n    setItem(\"cartItems\", newCartItemsID);\n  };\n  const deleteItem = (id) => {\n    if (props.cartItemsID[id]) {\n      delete props.cartItemsID[id];\n      const newProducts = { ...props.cartItemsID };\n      props.setCartItemsID(newProducts);\n      setItem(\"cartItems\", newProducts);\n    }\n  };\n\n  return (\n    <div\n      className={\n        cartProducts.length > 1\n          ? \"width-100 pt-7 flex-column px-1 border-box\"\n          : \"width-100 pt-7 flex-column px-1 border-box pb-footer\"\n      }\n    >\n      <div className=\"flex width-100\">\n        <table className=\"ui celled table width-75\">\n          <thead>\n            <tr>\n              <th className=\"width-25\">‘±’∫÷Ä’°’∂÷Ñ’®</th>\n              <th className=\"width-25\">‘±’∂’∏÷Ç’∂’®</th>\n              <th className=\"width-25\">’î’°’∂’°’Ø’®</th>\n              <th className=\"width-25\">‘≥’´’∂’®</th>\n            </tr>\n          </thead>\n          {cartProducts.length > 0 ? (\n            cartProducts.map((item) => {\n              return (\n                <tbody key={item._id}>\n                  <tr className=\"width-100\">\n                    <td data-label=\"Name\">\n                      {\" \"}\n                      <img\n                        src={item.images[0]}\n                        alt={item.description}\n                        width=\"100%\"\n                      />\n                    </td>\n                    <td\n                      data-label=\"Title\"\n                      className=\"height-100 font-large font-red jscac capitalize\"\n                    >\n                      {item.title}\n                    </td>\n                    <td data-label=\"Count\">\n                      <div className=\"cart_plus_minus width-100\">\n                        <div\n                          className={\n                            item.count === 1\n                              ? \"cart_count_button disabled\"\n                              : \"cart_count_button\"\n                          }\n                          onClick={() => minusItem(item._id, item.count)}\n                        >\n                          -\n                        </div>\n                        <div className=\"cart_count\">{item.count}</div>\n                        <div\n                          className=\"cart_count_button\"\n                          onClick={() => plusItem(item._id, item.count)}\n                        >\n                          +\n                        </div>\n                        <div\n                          className=\"ui vertical animated button standart ml-2 remove_button\"\n                          tabIndex=\"0\"\n                          onClick={() => deleteItem(item._id)}\n                        >\n                          <div className=\"hidden content\">’ã’∂’ª’•’¨</div>\n                          <div className=\"visible content\">\n                            <i className=\"trash icon\"></i>\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td\n                      data-label=\"totalPrice\"\n                      className=\"font-medium font-red\"\n                    >\n                      <div className=\"w-100 jscac font-medium-cart\">\n                        {item.totalPrice}÷è\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              );\n            })\n          ) : (\n            <tbody>\n              <tr>\n                <td>\n                  <div className=\"jsc  width-100\">\n                    <h1 className=\"font-small-cart font-red\">\n                      ’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’® ’§’•’º ’§’°’ø’°÷Ä’Ø ’ß, ’®’∂’ø÷Ä’•÷Ñ ÷á ’°’æ’•’¨’°÷Å÷Ä’•÷Ñ ’±’•÷Ä\n                      ’∂’°’≠’®’∂’ø÷Ä’°’Æ ’¥’∏’§’•’¨’∂’•÷Ä’® \"‘Ω’°’∂’∏÷Ç’©\" ’¢’°’™’∂’´÷Å\n                      <span role=\"img\" aria-label=\"\">\n                         üòä\n                      </span>\n                    </h1>\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          )}\n        </table>\n\n        <div className=\"width-25-cart flex-column\">\n          <p className=\"font-small-cart font-red weight-6 text-center\">\n            ‘±’º’°÷Ñ’∏÷Ç’¥’® ’°’¥’¢’∏’≤’ª ’Ä’°’µ’°’Ω’ø’°’∂’∏÷Ç’¥ ‘±’Ü’é’É‘±’ê ’ß\n          </p>\n          <p className=\"font-medium-cart font-red weight-8 capitalize mt-3\">\n            ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä’®\n          </p>\n          <p className=\"font-medium-cart font-red weight-7\">{totalPrice}÷è</p>\n          <p className=\"font-small-cart font-red weight-6 mt-3\">\n            ’é’≥’°÷Ä’∏÷Ç’¥’® ’Ø’°’∂’≠’´’Ø\n          </p>\n        </div>\n      </div>\n\n      {cartProducts.length > 0 ? (\n        <OrderForm\n          cartProducts={cartProducts}\n          setCartProducts={setCartProducts}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.fetchData.products,\n  };\n};\n\nexport default connect(mapStateToProps)(CartPage);\n"],"sourceRoot":""}